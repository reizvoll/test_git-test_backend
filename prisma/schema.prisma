generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String     @id @default(cuid())
  githubId   String     @unique
  username   String
  accessToken String
  image      String?    // GitHub 프로필 이미지 URL
  activities Activity[]
  accounts   Account[]
  sessions   Session[]
  githubActivities GitHubActivity[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Activity {
  id        String   @id @default(cuid())
  userId    String
  type      String
  repoName  String
  payload   Json
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([createdAt])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model GitHubActivity {
  id          String   @id @default(cuid())
  userId      String
  type        String   // commit, pull request, issue 등
  repository  String
  title       String
  description String?  @db.Text
  url         String
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
} 